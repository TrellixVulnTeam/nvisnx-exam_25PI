import { EventEmitter, Input, Output, Directive, ElementRef, HostListener, forwardRef, } from "@angular/core";
import { PanelFactoryService } from "../services/panel-factory.service";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
export class NgxColorsTriggerDirective {
    constructor(triggerRef, panelFactory) {
        this.triggerRef = triggerRef;
        this.panelFactory = panelFactory;
        //Main input/output of the color picker
        // @Input() color = '#000000';
        // @Output() colorChange:EventEmitter<string> = new EventEmitter<string>();
        this.color = "";
        //This defines the type of animation for the palatte.(slide-in | popup)
        this.colorsAnimation = "slide-in";
        this.position = "bottom";
        this.attachTo = undefined;
        this.overlayClassName = undefined;
        this.colorPickerControls = "default";
        this.acceptLabel = "ACCEPT";
        this.cancelLabel = "CANCEL";
        // This event is trigger every time the selected color change
        this.change = new EventEmitter();
        // This event is trigger every time the user change the color using the panel
        this.input = new EventEmitter();
        // This event is trigger every time the user change the color using the panel
        this.slider = new EventEmitter();
        this.isDisabled = false;
        this.onTouchedCallback = () => { };
        this.onChangeCallback = () => { };
    }
    onClick() {
        this.open();
    }
    open() {
        if (!this.isDisabled) {
            this.panelRef = this.panelFactory.createPanel(this.attachTo, this.overlayClassName);
            this.panelRef.instance.iniciate(this, this.triggerRef, this.color, this.palette, this.colorsAnimation, this.format, this.hideTextInput, this.hideColorPicker, this.acceptLabel, this.cancelLabel, this.colorPickerControls, this.position);
        }
    }
    close() {
        this.panelFactory.removePanel();
    }
    onChange() {
        this.onChangeCallback(this.color);
    }
    setDisabledState(isDisabled) {
        this.isDisabled = isDisabled;
        this.triggerRef.nativeElement.style.opacity = isDisabled ? 0.5 : undefined;
    }
    setColor(color) {
        this.writeValue(color);
        this.input.emit(color);
    }
    sliderChange(color) {
        this.slider.emit(color);
    }
    get value() {
        return this.color;
    }
    set value(value) {
        this.setColor(value);
        this.onChangeCallback(value);
    }
    writeValue(value) {
        if (value !== this.color) {
            this.color = value;
            this.onChange();
            this.change.emit(value);
        }
    }
    registerOnChange(fn) {
        this.onChangeCallback = fn;
    }
    registerOnTouched(fn) {
        this.onTouchedCallback = fn;
    }
}
NgxColorsTriggerDirective.decorators = [
    { type: Directive, args: [{
                selector: "[ngx-colors-trigger]",
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(() => NgxColorsTriggerDirective),
                        multi: true,
                    },
                ],
            },] }
];
NgxColorsTriggerDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: PanelFactoryService }
];
NgxColorsTriggerDirective.propDecorators = {
    colorsAnimation: [{ type: Input }],
    palette: [{ type: Input }],
    format: [{ type: Input }],
    position: [{ type: Input }],
    hideTextInput: [{ type: Input }],
    hideColorPicker: [{ type: Input }],
    attachTo: [{ type: Input }],
    overlayClassName: [{ type: Input }],
    colorPickerControls: [{ type: Input }],
    acceptLabel: [{ type: Input }],
    cancelLabel: [{ type: Input }],
    change: [{ type: Output }],
    input: [{ type: Output }],
    slider: [{ type: Output }],
    onClick: [{ type: HostListener, args: ["click",] }]
};
//# sourceMappingURL=data:application/json;base64,